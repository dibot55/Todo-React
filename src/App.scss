html{
  background: rgb(216, 215, 215);
  height: 100%;
  display: flex;
};

body{
  width: 100%;
  margin: auto;
};

.App{
  font-family: sans-serif;
  text-align: center;
};

.todo-list{
  background: white;
  font-size: 18px;
  max-width: 300px;
  margin: auto;
  margin-bottom: 24px;
  padding: 8px, 16px;
  box-shadow: 0 5px 30px rgba(0, 0, 0, 0.253);
};

//constante en sass
$colorRosa: #c4bfbf;
$colorRosaHover: #f383f5;

$colorAzul: rgb(148, 182, 226);
$colorAzulHover: rgb(67, 81, 201);

//declaramos un elemento button como una funcion en JS
@mixin button ($class, $color, $colorHover) { //este seria crear el constructor
  .button.#{$class}{background: $color;} //metodos del constructor
  .button.#{$class}:hover{background: $colorHover;} //cuando pase el mouse encima el boton
  .button.#{$class}:active{background: $color;} //cuando le de click al boton
};

.button{ //atodos los button les vamos a quitar el borde
  outline: none;
  padding: 8px;
  border: 1px solid white;
  border-radius: 20px;
  color: rgb(82, 79, 79);
};

@include button ('pink', $colorRosa, $colorRosaHover); //inicializa el contructor
@include button('blue', $colorAzul, $colorAzulHover);//los que tengan clase "blue" obtienen los colores indicados

.file_input {
  padding: 2px;
  background: rgb(221, 218, 218);
};

//una clase text dentro de file_input
.file_input > .text {
  outline: none;
  padding: 0px, 10px;
  font-size: 18px;
  width: 230px;
  height: 43px;
  background: transparent;
  border: 0px solid;
};

$duracion: 0.4s;
$stroke: rgb(233, 55, 55);//contra luz
$colorText: rgb(51, 51, 51);
$colorTextChecked: rgb(236, 77, 77);

.todo {
  display: block;
  position: relative;
  padding: 1em 1em 1em 16%;
  margin: 0 auto;
  cursor: pointer; //seleccionar del cursor
  border-bottom: solid 1px #ddd;
  &:last-child { //el ultimo de la lista 
    border-bottom: none;
  };
};

//animaciones
.todo.new-item {
  opacity: 0;
  transform: translateX(100px); //aqui empieza
  animation: fadein .3s linear forwards;
};

//activar animaciones

@keyframes fadein{ //es de ccs puro
  to{
    transform: translateX(0px); //aqui acaba
    opacity: 1;
  }; // :O
};
//------------------------------------checkbox todo_state inicial----------------------------
//para que el checkbox desaparesca y solo se ilumine el texto
.todo_state { //definimos su posicion y estilo inicial o base
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
};
//-------------------------------------------------------------------------------------------

.todo_text{
  color: $colorText;
  text-align: right;
  transition: all $duracion/2 linear $duracion/2;
};

//hacer un icon para el checkbox

.todo_icon {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  margin: auto;

  fill: none;
  stroke: $stroke;
  stroke-width: 2;
  stroke-linejoin: round;
  stroke-linecap: round;
};

.todo_line, .todo_box, .todo_check {
  transition: stroke-dashoffset $duracion cubic-bezier(0.075, 0.82, 0.165, 1); //animacion
};

.todo_circle { //circulo
  stroke: $stroke; //borde verde
  stroke-dasharray: 1 6; //arreglo de strokes
  stroke-width: 0%;

  /*siempre que se hace una animacion o se transforma un elemento a otro 
  como un cuadrado o un circulo se usa Transform
  */

  transform-origin: 13.5px 12.5px;
  transform: scale(0.4) rotate(0deg);
  animation: none $duracion linear;

  //crear una animacion dentro de la misma clase
  @keyframes explode {
    //definimos dos puntos de partidas

    30%{//al 30% de la animacion explode hace esto
      stroke-width: 3;
      stroke-opacity: 1;
      transform: scale(0.8) rotate(40deg); //deg son de grados
    };

    100%{ //cuando finalice la animacion hace esto
      stroke-width: 0;
      stroke-opacity: 0;
      transform: scale(1.1) rotate(60deg);
    };
  };
};

.todo_box {
  stroke-dasharray: 56, 56; /*define el patron de las lineas y de los dash 
  o huecos que usamos para pintar el controno de la forma. los 2 numeros son los patrones 
  o lineas continuas mas grandes*/

  stroke-dashoffset: 0; //define el desplazamiento del guion en nuestro espacio
  transition-delay: $duracion * 0.2;//tiempo que debe de esperar a que se ejecute la transicion
};

.todo_check {
  stroke: $stroke; //margen que contiene el check
  stroke-dasharray: 9.8 9.8; //lineas mas pequeñas
  stroke-dashoffset: 9; //se desplaza para que veas cuando le dash check
  transition-delay: $duracion * 0.4;
};

.todo_line {
  stroke-dasharray: 168, 168;
  stroke-dashoffset: 168;
};

.todo_circle {
  animation-delay: $duracion * 0.7;
  animation-duration: $duracion * 0.7;
};

//----------------------------Checkbox todo-state final-------------------

//aqui se junta todo-------------

.todo_state:checked { //definir lo que hace despues de que este checkado
  ~ .todo_text { /* se añade la virguilla ~ 
    que permite modificar otras clases dentro de un evento en este caso checked*/
    
    transition-delay: 0s;
    color: $colorTextChecked;
    opacity: 0.6;
  };
  
  ~ .todo_icon .todo_box{
    stroke-dashoffset: 56; 
    transition-delay: 0s;
  };

  ~ .todo_icon .todo_line{
    stroke-dashoffset: -8;
  };

  ~ .todo_icon .todo_check {
    stroke-dashoffset: 0;
    transition-delay: $duracion * 0.6;
  };

  ~ .todo_icon .todo_circle {
    animation-name: explode;
  };
};
//-------------------------------------------------------------------------

.animationchk{
  position: absolute;
  z-index: -1; //que tan alfondo o que tan alfrente lo quieres de acuerdo a los elementos. se superpone
  //para que se oculte de tras de un elemento html hasta que se active la animacion
  opacity: 0;
};